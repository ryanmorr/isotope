/*! @ryanmorr/isotope v3.0.0 | https://github.com/ryanmorr/isotope */
/*! @ryanmorr/define-store v1.0.0 | https://github.com/ryanmorr/define-store */
function t(t){return(...e)=>{let n;const r=[],s=()=>n,u=t=>{if(!r.includes(t))return r.push(t),t(n),()=>{const e=r.indexOf(t);-1!==e&&r.splice(e,1)}},c=t(s,((...t)=>(n=t[0],r.slice().forEach((e=>e(...t))),n)),u,r)(...e);return c.subscribe||(c.subscribe=u),c.then=t=>t(s()),c.toString=()=>String(s()),c.toJSON=s,c.valueOf=s,c}}const e=t(((t,e)=>n=>{e(n);const r=n=>(e(n,t()),n);return{value:t,set:r,update:e=>r(e(t()))}})),n=t(((t,e)=>(...n)=>{let r=!1;const s=n.pop(),u=s.length>n.length,c=[],o=()=>u?s(...c):e(s(...c),t());return n.forEach(((t,e)=>t.subscribe((t=>{c[e]=t,r&&o()})))),u&&c.push((n=>e(n,t()))),r=!0,o(),{value:t}})),r=t(((t,e)=>(n,r)=>(e(n),{value:t,dispatch:n=>{const s=t();return e(r(s,n),s),t()}})));export{n as derived,r as reducer,e as store};
