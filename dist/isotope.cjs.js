/*! @ryanmorr/isotope v0.1.0 | https://github.com/ryanmorr/isotope */'use strict';function _typeof2(a){return _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof2(a)}Object.defineProperty(exports,"__esModule",{value:!0});function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(a){return _typeof2(a)}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":_typeof2(a)},_typeof(a)}var tracker=[],OBSERVABLE=Symbol("observable");function addDependency(a){var b=tracker[tracker.length-1];b&&a(b)}function observable(a,b){var c=[],d=function(b){var d=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1];if(!c.includes(b))return c.push(b),!0===d&&b(a,null),function(){var a=c.indexOf(b);-1!==a&&c.splice(a,1)}},e=b(d,function(a,b){c.slice().forEach(function(c){return c(a,b)})});return e[OBSERVABLE]=!0,e.subscribe=d,e}function data(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:null;return observable(a,function(b,c){return function(){if(1===arguments.length){var d=0>=arguments.length?void 0:arguments[0];if(d===a&&(null===d||"object"!==_typeof(d)))return a;var e=a;return a=d,c(a,e),a}return addDependency(b),a}})}function computed(a){var b=a();return observable(b,function(c,d){var e=function c(){tracker.push(c);var e=b;b=a(),tracker.pop(),d(b,e)};return e(),function(){return addDependency(c),b}})}function isObservable(a){return"function"==typeof a&&!0===a[OBSERVABLE]}exports.computed=computed,exports.data=data,exports.isObservable=isObservable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNvdG9wZS5janMuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pc290b3BlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRyYWNrZXIgPSBbXTtcclxuY29uc3QgT0JTRVJWQUJMRSA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xyXG5cclxuZnVuY3Rpb24gYWRkRGVwZW5kZW5jeShzdWJzY3JpYmUpIHtcclxuICAgIGNvbnN0IGNhbGxiYWNrID0gdHJhY2tlclt0cmFja2VyLmxlbmd0aCAtIDFdO1xyXG4gICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgc3Vic2NyaWJlKGNhbGxiYWNrKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gb2JzZXJ2YWJsZSh2YWx1ZSwgc2V0dXApIHtcclxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gW107XHJcbiAgICBjb25zdCBzdWJzY3JpYmUgPSAoc3Vic2NyaWJlciwgaW1tZWRpYXRlID0gZmFsc2UpID0+IHtcclxuICAgICAgICBpZiAoIXN1YnNjcmliZXJzLmluY2x1ZGVzKHN1YnNjcmliZXIpKSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcik7XHJcbiAgICAgICAgICAgIGlmIChpbW1lZGlhdGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIodmFsdWUsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHN1YnNjcmliZXJzLmluZGV4T2Yoc3Vic2NyaWJlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZW1pdCA9IChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcclxuICAgICAgICBzdWJzY3JpYmVycy5zbGljZSgpLmZvckVhY2goKHN1YnNjcmliZXIpID0+IHN1YnNjcmliZXIobmV3VmFsdWUsIG9sZFZhbHVlKSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgY2FsbGJhY2sgPSBzZXR1cChzdWJzY3JpYmUsIGVtaXQpO1xyXG4gICAgY2FsbGJhY2tbT0JTRVJWQUJMRV0gPSB0cnVlO1xyXG4gICAgY2FsbGJhY2suc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xyXG4gICAgcmV0dXJuIGNhbGxiYWNrO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGF0YSh2YWx1ZSA9IG51bGwpIHtcclxuICAgIHJldHVybiBvYnNlcnZhYmxlKHZhbHVlLCAoc3Vic2NyaWJlLCBlbWl0KSA9PiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGFyZ3NbMF07XHJcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdmFsdWUgJiYgKG5ld1ZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBuZXdWYWx1ZSAhPT0gJ29iamVjdCcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgZW1pdCh2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYWRkRGVwZW5kZW5jeShzdWJzY3JpYmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZChjb21wdXRlZEZuKSB7XHJcbiAgICBsZXQgdmFsdWUgPSBjb21wdXRlZEZuKCk7XHJcbiAgICByZXR1cm4gb2JzZXJ2YWJsZSh2YWx1ZSwgKHN1YnNjcmliZSwgZW1pdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0cmFja2VyLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkRm4oKTtcclxuICAgICAgICAgICAgdHJhY2tlci5wb3AoKTtcclxuICAgICAgICAgICAgZW1pdCh2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBhZGREZXBlbmRlbmN5KHN1YnNjcmliZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGUob2JqKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmpbT0JTRVJWQUJMRV0gPT09IHRydWU7XHJcbn1cclxuIl0sIm5hbWVzIjpbInRyYWNrZXIiLCJPQlNFUlZBQkxFIiwiU3ltYm9sIiwiYWRkRGVwZW5kZW5jeSIsInN1YnNjcmliZSIsImNhbGxiYWNrIiwibGVuZ3RoIiwib2JzZXJ2YWJsZSIsInZhbHVlIiwic2V0dXAiLCJzdWJzY3JpYmVycyIsInN1YnNjcmliZXIiLCJpbW1lZGlhdGUiLCJpbmNsdWRlcyIsInB1c2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwic2xpY2UiLCJmb3JFYWNoIiwiZGF0YSIsImVtaXQiLCJhcmd1bWVudHMiLCJf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
