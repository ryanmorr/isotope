/*! @ryanmorr/isotope v3.2.0 | https://github.com/ryanmorr/isotope */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).isotope={})}(this,(function(e){"use strict";class t{constructor(e){this._value=e,this._subscribers=[]}value(){return this._value}set(e){const t=this.value();if(e!==t)return this._value=e,this._subscribers.slice().forEach((s=>s(e,t))),e}subscribe(e){const t=this._subscribers;if(!t.includes(e))return t.push(e),e(this.value()),()=>{const s=t.indexOf(e);-1!==s&&t.splice(s,1)}}then(e){e(this.value())}toString(){return String(this.value())}valueOf(){return this.value()}toJSON(){return this.value()}}class s extends t{update(e){return this.set(e(this.value()))}}class r extends t{constructor(e,t){super(e),this._reducer=t}dispatch(e){return super.set(this._reducer(this.value(),e))}}class u extends t{constructor(e,t){super();let s=!1;const r=[],u=()=>super.set(t(...r));e.forEach(((e,t)=>e.subscribe((e=>{r[t]=e,s&&u()})))),s=!0,u()}}class n extends t{constructor(e,t){super();let s=0,r=!1;const u=[],n=e=>t(...u.concat([e]));e.forEach(((e,t)=>e.subscribe((e=>{if(u[t]=e,r){s++;const e=s;n((t=>{s===e&&super.set(t)}))}})))),r=!0,n((e=>super.set(e)))}}u.prototype.set=void 0,n.prototype.set=void 0,r.prototype.set=void 0,e.Store=t,e.derived=function(...e){let t,s;return Array.isArray(e[0])?(t=e[0],s=e[1]):(t=e,s=e.pop()),s.length>t.length?new n(t,s):new u(t,s)},e.reducer=function(e,t){return new r(e,t)},e.store=function(e){return new s(e)}}));
